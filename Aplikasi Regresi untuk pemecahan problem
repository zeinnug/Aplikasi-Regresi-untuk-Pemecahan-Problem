import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
from scipy.optimize import curve_fit
from sklearn.metrics import mean_squared_error

# Banner program
print("=== PROGRAM Aplikasi Regresi untuk Pemecahan Problem ===")
print("=== Muhammad Zein Al-kautsar Nugroho - 21120122140151 ===")
print("==== MATA KULIAH METODE NUMERIK KELAS B ====")

# Load the data
file_path = 'C:\\Users\\LENOVO\\Downloads\metnmm\\Student_Performance (1).csv'
data = pd.read_csv(file_path)

# Extract the relevant columns
TB = data['Hours Studied'].values.reshape(-1, 1)
NT = data['Performance Index'].values

# Linear Regression Model untuk TB -> NT
linear_model_tb_nt = LinearRegression()
linear_model_tb_nt.fit(TB, NT)
NT_linear_tb_pred = linear_model_tb_nt.predict(TB)

# Exponential Regression Model for TB -> NT
def exponential_model(x, a, b):
    return a * np.exp(b * x)

params_tb, covariance_tb = curve_fit(exponential_model, TB.ravel(), NT)
NT_exp_tb_pred = exponential_model(TB.ravel(), *params_tb)

# Plotting the results
plt.figure(figsize=(14, 6))

# Plot for Linear Regression
plt.subplot(1, 2, 1)
plt.scatter(TB, NT, color='blue', label='Data Points')
plt.plot(TB, NT_linear_tb_pred, color='red', label='Linear Regression')
plt.xlabel('Hours Studied (TB)')
plt.ylabel('Performance Index (NT)')
plt.title('Linear Regression (TB -> NT)')
plt.legend()

# Plot for Exponential Regression
plt.subplot(1, 2, 2)
plt.scatter(TB, NT, color='blue', label='Data Points')
plt.plot(TB, NT_exp_tb_pred, color='green', label='Exponential Regression')
plt.xlabel('Hours Studied (TB)')
plt.ylabel('Performance Index (NT)')
plt.title('Exponential Regression (TB -> NT)')
plt.legend()

plt.show()

# Calculating RMS error
rms_linear_tb = np.sqrt(mean_squared_error(NT, NT_linear_tb_pred))
rms_exp_tb = np.sqrt(mean_squared_error(NT, NT_exp_tb_pred))

print(f'RMS error for Linear Regression (TB -> NT): {rms_linear_tb}')
print(f'RMS error for Exponential Regression (TB -> NT): {rms_exp_tb}')

# Testing the models
def test_models(TB_test):
    TB_test = np.array(TB_test).reshape(-1, 1)
    NT_linear_test_pred = linear_model_tb_nt.predict(TB_test)
    NT_exp_test_pred = exponential_model(TB_test.ravel(), *params_tb)
    return NT_linear_test_pred, NT_exp_test_pred

# Example test
TB_test_example = [1, 2, 3, 4, 5]
NT_linear_test_pred, NT_exp_test_pred = test_models(TB_test_example)

for i, TB_val in enumerate(TB_test_example):
    print(f'TB = {TB_val}: Linear Predicted NT = {NT_linear_test_pred[i]}, Exponential Predicted NT = {NT_exp_test_pred[i]}')
